generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

enum Plan {
  free
  plus
  pro
}

enum JobStatus {
  queued
  processing
  succeeded
  failed
}

enum JobType {
  text
  image
  music
}

model User {
  id        String   @id
  email     String   @unique
  role      Role     @default(USER)
  plan      Plan     @default(free)
  quota     Int      @default(0)
  jobs      Job[]
  usages    Usage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id        String   @id
  name      String
  teamId    String?
  apiKeys   ApiKey[]
  jobs      Job[]
  usages    Usage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
  id          String   @id @default(cuid())
  type        JobType
  provider    String
  prompt      String
  params      Json
  status      JobStatus @default(queued)
  progress    Int       @default(0)
  resultUrls  Json      @default("[]")
  usage       Json      @default("{}")
  raw         Json      @default("{}")
  userId      String
  projectId   String
  user        User      @relation(fields: [userId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([userId])
  @@index([projectId])
}

model Usage {
  id           String   @id @default(cuid())
  userId       String
  projectId    String
  model        String
  inputTokens  Int?
  outputTokens Int?
  credits      Int?
  cost         Float?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  project      Project  @relation(fields: [projectId], references: [id])
  @@index([userId])
  @@index([projectId])
}

model ApiKey {
  id           String   @id @default(cuid())
  projectId    String
  provider     String
  keyAlias     String
  encryptedKey String
  createdAt    DateTime @default(now())
  rotatedAt    DateTime?
  project      Project  @relation(fields: [projectId], references: [id])
  @@unique([keyAlias, projectId], name: "keyAlias_projectId")
}

model WebhookEvent {
  id            String   @id @default(cuid())
  provider      String
  externalJobId String
  payload       Json
  handledAt     DateTime?
  createdAt     DateTime @default(now())
}
